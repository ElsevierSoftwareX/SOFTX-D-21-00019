* eliminare variabili globali
- usando variabili statiche
- oppure passando parametri, definiti nel main (magari creare una struct network con tutti i nodi e i canali)
- vedi https://stackoverflow.com/questions/3208531/c-program-structure-avoiding-global-variables-includes-etc
* input e output
** configuration file per l'input
- file che definisce l'input, con coppie [is-preinput, 0], [channel-file, x.csv]
- fare formato json o csv
** riscrivere  batch-means.py
- usare i for per calcolare le varie misure
- vedere se ci sono funzioni di numpy che direttamente calcolano varianza, media etc.
** fare script che esegure direttamente cloth e batch-means.py
* organizzare i file
** fare due cartelle: src, include
** fare file initialization.c dove vengono messi tutti gli initialize 
** fare file network.c dove ci sono i vari create_channel create_node
** fare file payment.c
** il file protocol.c diventa htlc.c
- cosi quando si vuole aggiungere nuovo protocollo si crea file separato new-protoco.c
** global.h diventa thread.h
* usa watts strogatz per connessione nodi
* cambio nomi variabili
** DONE camel case to snake case
** TODO channelInfo -> channel, channel->edge
** TODO peer->node, Node-> (chi e' questo Node in global.h?)
** TODO togliere typedef e lasciare struct x
* minor
** exit(-1) in tutte le condizioni di errore (per es. in check_policy_forward)
- fai search di parola chiave "ERROR"
** rimuovere withholds R
** rimuovere gini
- oppure rifare in modo che non bisogna specificare i fondi *3
** ripensare a sigma_amount
** ripensare a uncoop_after_HTLC
** cancellare funzioni non utilizzate e commentate
* feedback federico
** cercare regexp per passare da snake a camel
** aspettare suo feedback
** prendere un tesista
* feedback antonio
** farlo fare a gdiba
** faccio io nel tempo perso
** aprire la tesi e standby
